#lang typed/racket

(require "prefab.rkt")
(define-type SrcLoc (U False
                       (Syntaxof Any)
                       (List Any
                             (U Integer False)
                             (U Integer False)
                             (U Integer False)
                             (U Integer False))
                       (Vector Any
                               (U Integer False)
                               (U Integer False)
                               (U Integer False)
                               (U Integer False))))

;; Replaces the syntax/loc for the top of the syntax object, until
;; a part which doesn't belong to old-source is reached.
;; e.g. (with-syntax ([d user-provided-syntax])
;;        (replace-top-loc
;;          #'(a b (c d e))
;;          (syntax-source #'here)
;;          new-loc))
;; will produce a syntax object #'(a b (c (x (y) z) e))
;; where a, b, c, z, e and their surrounding forms have their srcloc set to
;; new-loc, but (x (y) z) will be left intact, if the user-provided-syntax
;; appears in another file.
(: replace-top-loc (â†’ Syntax Any SrcLoc Syntax))
(define (replace-top-loc stx old-source new-loc)
  (define (process-e [stx : (U Syntax-E PrefabTop)]) : (U Syntax-E PrefabTop)
    (cond
      ;[(syntax? stx)
      [(prefab-struct? stx)
       (apply make-prefab-struct
              (prefab-struct-key stx)
              (map process (vector->list (struct->vector stx))))]
      [(and (pair? stx) (syntax? (cdr stx)))
       (cons (process (car stx))
             (process (cdr stx)))]
      [(and (pair? stx) (not (syntax? (cdr stx))))
       (map process stx)]
      [(vector? stx)
       (list->vector (map process (vector->list stx)))]
      [(box? stx)
       (box (process (unbox stx)))]
      [else
       stx]))
  (define (process [stx : Syntax]) : Syntax
    (if (equal? (syntax-source stx) old-source)
        (datum->syntax stx (process-e (syntax-e stx)) new-loc stx)
        stx
        ;; Use the following expression to replace the loc throughout stx
        ;; instead of stopping the depth-first-search when the syntax-source
        ;; is not old-source anymore
        #;(datum->syntax stx (process (syntax-e stx)) stx stx)))

  (process stx))
